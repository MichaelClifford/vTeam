name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.10, 3.11]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run linting with flake8
      run: |
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Run type checking with mypy
      run: |
        pip install mypy
        mypy data/ components/ --ignore-missing-imports
      continue-on-error: true  # Allow type checking to fail initially

    - name: Run tests with pytest
      run: |
        pytest tests/ -v --cov=data --cov=components --cov-report=xml --cov-report=term

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
      continue-on-error: true

  security:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
        pip install -r requirements.txt

    - name: Run safety check
      run: |
        safety check --json || true

    - name: Run bandit security check
      run: |
        bandit -r . -x tests/ -f json || true

  streamlit-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Test Streamlit app syntax
      run: |
        python -m py_compile app.py
        python -c "import app; print('App imports successfully')"

    - name: Test component imports
      run: |
        python -c "from data.rfe_models import RFE, WorkflowState; print('Models import successfully')"
        python -c "from components.workflow import render_workflow_diagram; print('Components import successfully')"

  build:
    needs: [test, security, streamlit-test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create deployment package
      run: |
        mkdir -p dist/
        cp -r . dist/rfe-builder/
        cd dist/
        tar -czf rfe-builder-${{ github.sha }}.tar.gz rfe-builder/

    - name: Upload build artifact
      uses: actions/upload-artifact@v3
      with:
        name: rfe-builder-${{ github.sha }}
        path: dist/rfe-builder-${{ github.sha }}.tar.gz
        retention-days: 30
